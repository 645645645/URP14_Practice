//https://github.com/Microsoft/DirectX-Graphics-Samples/blob/master/MiniEngine/Core/Shaders/GenerateMipsCS.hlsli

// 未解决: 适配DIM_MIP_LEVEL_COUNT = 1-4 这些变体。。


#include "ReductionCommon.hlsl"

// #pragma enable_d3d11_debug_symbols
#pragma kernel KHZBCreator KERNEL_NAME=KHZBCreator

#define MAX_MIP_BATCH_SIZE 4
#define GROUP_TILE_SIZE 8

CBUFFER_START(cb)
float4 _DispatchThreadIdToBufferUV; // x: 1/width, y: 1/height, offset
float4 _InputViewportMaxBound; // xy: 1/width, y: 1/height, zw: MaxUV
uint _CurrentMipBatchCount; //对应 DIM_MIP_LEVEL_COUNT 是个数值变体 unity只有bool开关
CBUFFER_END

Texture2D<float> _ParentTextureMip;
SamplerState sampler_ParentTextureMip;

// HiZ Mipmap输出
RWTexture2D<float> _HiZMip0;
RWTexture2D<float> _HiZMip1;
RWTexture2D<float> _HiZMip2;
RWTexture2D<float> _HiZMip3;

// 线程组共享内存(64个float)
groupshared float _GroupSharedDepth[GROUP_TILE_SIZE * GROUP_TILE_SIZE];

void OutputMipLevel(uint MipLevel, uint2 OutputPixelPos, float minDepth)
{
    // #if DIM_MIP_LEVEL_COUNT >= 2 //ue的编译宏，urp这边似乎只有shader keywords 开关
    if (_CurrentMipBatchCount >= 2)
        if (MipLevel == 1)
        {
            _HiZMip1[OutputPixelPos] = minDepth;
        }
    // #endif
    // #if DIM_MIP_LEVEL_COUNT >= 3
    if (_CurrentMipBatchCount >= 3)
        if (MipLevel == 2)
        {
            _HiZMip2[OutputPixelPos] = minDepth;
        }
    // #endif
    // #if DIM_MIP_LEVEL_COUNT >= 4
    if (_CurrentMipBatchCount >= 4)
        if (MipLevel == 3)
        {
            _HiZMip3[OutputPixelPos] = minDepth;
        }
    // #endif
}


[numthreads( GROUP_TILE_SIZE, GROUP_TILE_SIZE, 1 )]
void KERNEL_NAME(
    // uint3 id : SV_DispatchThreadID,
    uint GroupThreadIndex : SV_GroupIndex, // 线程在线程组内的扁平化索引[0,63]
    // uint3 groupThreadID : SV_GroupThreadID,
    uint3 GroupId : SV_GroupID) // 线程组ID
{
    uint2 GroupThreadId;
    UNITY_BRANCH
    if (_CurrentMipBatchCount == 1)
    {
        GroupThreadId = uint2(GroupThreadIndex % GROUP_TILE_SIZE, GroupThreadIndex / GROUP_TILE_SIZE);
    }
    else
    {
        // 实际开发中，直接使用SV_GroupThreadID更高效
        GroupThreadId = InitialTilePixelPositionForReduction2x2(MAX_MIP_BATCH_SIZE - 1, GroupThreadIndex);
        // GroupThreadId = groupThreadID.xy;
    }

    uint2 DispatchThreadId = GROUP_TILE_SIZE.xx * GroupId.xy + GroupThreadId;

    // 计算采样UV(考虑半个texel偏移)
    float2 uv = (float2(DispatchThreadId) + 0.5) * _DispatchThreadIdToBufferUV.xy + _DispatchThreadIdToBufferUV.zw;

    // #if defined(SHADER_API_GLCORE) || defined(SHADER_API_GLES3)|| defined(SHADER_API_GLES) || defined(SHADER_API_MOBILE)
    // float2 UV[4];
    // UV[0] = min(float2(-0.25f, -0.25f) * _DispatchThreadIdToBufferUV.xy + uv, _InputViewportMaxBound.zw);
    // UV[0] = min(float2(0.25f, -0.25f) * _DispatchThreadIdToBufferUV.xy + uv, _InputViewportMaxBound.zw);
    // UV[0] = min(float2(-0.25f, 0.25f) * _DispatchThreadIdToBufferUV.xy + uv, _InputViewportMaxBound.zw);
    // UV[0] = min(float2(0.25f, 0.25f) * _DispatchThreadIdToBufferUV.xy + uv, _InputViewportMaxBound.zw);
    // float4 depths;
    // depths.x = _ParentTextureMip.SampleLevel(sampler_ParentTextureMip, UV[0], 0);
    // depths.y = _ParentTextureMip.SampleLevel(sampler_ParentTextureMip, UV[1], 0);
    // depths.z = _ParentTextureMip.SampleLevel(sampler_ParentTextureMip, UV[2], 0);
    // depths.w = _ParentTextureMip.SampleLevel(sampler_ParentTextureMip, UV[3], 0);
    // #else
    // 设置了Clamp 应该可以省
    // 调整UV确保在有效范围内(处理非2的幂分辨率)
    uv = mad(_InputViewportMaxBound.xy, float2(-0.25, -0.25), uv);
    uv = min(uv, _InputViewportMaxBound.zw - _InputViewportMaxBound.xy);

    // 采样2x2区域的深度值(使用gather取4个角点)
    float4 depths = _ParentTextureMip.Gather(sampler_ParentTextureMip, uv, 0);
    // #endif

    float minDepth = GetDeviceMinDepth(depths);

    uint2 OutputPixelPos = DispatchThreadId;

    // 写入第0级HiZ mipmap
    _HiZMip0[OutputPixelPos] = minDepth;

    if (_CurrentMipBatchCount == 1)
    {
    }
    else
    {
        // 存储到共享内存以便后续mipmap计算
        _GroupSharedDepth[GroupThreadIndex] = minDepth;


        UNITY_UNROLL
        for (uint MipLevel = 1; MipLevel < MAX_MIP_BATCH_SIZE; MipLevel++)
        {
            if (MipLevel < _CurrentMipBatchCount)
            {
                const uint TileSize = (uint)GROUP_TILE_SIZE / (1 << MipLevel);
                const uint ReduceBankSize = TileSize * TileSize;

                // LDS has been written before.
                if (MipLevel == 1)
                    GroupMemoryBarrierWithGroupSync();

                UNITY_BRANCH
                if (GroupThreadIndex < ReduceBankSize)
                {
                    float4 ParentDeviceZ;
                    ParentDeviceZ[0] = minDepth;


                    UNITY_UNROLL
                    for (uint i = 1; i < 4; i++)
                    {
                        uint LDSIndex = GroupThreadIndex + i * ReduceBankSize;
                        ParentDeviceZ[i] = _GroupSharedDepth[LDSIndex];
                    }

                    minDepth = GetDeviceMinDepth(ParentDeviceZ);


                    OutputPixelPos = OutputPixelPos >> 1;
                    OutputMipLevel(MipLevel, OutputPixelPos, minDepth);

                    _GroupSharedDepth[GroupThreadIndex] = minDepth;
                }
            }
        }
    }
}
